name: build

on:
  push:
    branches:
      - "master"
    paths-ignore:
      - ".github/**.md"
      - "docs/**"
      - "tools/**"
      - "README.md"
      - "README_zh-CN.md"

  pull_request:
    branches:
      - "master"
    paths-ignore:
      - ".github/**.md"
      - "docs/**"
      - "tools/**"
      - "README.md"
      - "README_zh-CN.md"

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install dependencies
        run: sudo apt-get install -y libssl-dev libblkid-dev
      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Debug
      - name: Build
        run: cmake --build ${{github.workspace}}/build --config Debug
      - name: Test
        working-directory: ${{github.workspace}}
        run: ./tools/run_cpp_tests.sh
  # build docker images on multiple platforms
  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        platforms: ["linux/amd64", "linux/arm64"]
        build-args: ["BASE_IMAGE=ubuntu:18.04", "BASE_IMAGE=ubuntu:20.04"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Extract tag from build-args
        run: |
          build_args="${{ matrix.build-args }}"
          tag=$(echo "$build_args" | sed 's/BASE_IMAGE=ubuntu:\(.*\)/ubuntu\1/g' | cut -d ',' -f1 | sed 's/\.//g')
          echo "Tag is $tag"
          echo "TAG=$tag" >> $GITHUB_ENV
      - name: Extract tag from platforms
        run: |
          platforms="${{ matrix.platforms }}"
          tag=$(echo "$platforms" | sed 's/linux\/\(.*\)/\1/g' | cut -d ',' -f1)
          echo "Tag is $tag"
          echo "PLATFORM=$tag" >> $GITHUB_ENV
      - name: Build multi-arch image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: ${{ matrix.platforms }}
          build-args: ${{ matrix.build-args }}
          load: true
          tags: |
            corenel/yalk:${{ env.TAG }}-${{ env.PLATFORM }}-${{ github.sha }}
            corenel/yalk:${{ env.TAG }}-${{ env.PLATFORM }}-latest
      # - name: Run tests
      #   run: |
      #     docker run --platform=${{ matrix.platforms }} corenel/yalk:${{ env.TAG }}-${{ env.PLATFORM }}-latest /bin/bash -c "cd /workspace && ./tools/run_cpp_tests.sh"
      - name: Collect artifacts
        run: |
          mkdir -p artifacts
          mkdir -p artifacts/libs
          mkdir -p artifacts/inlcude
          docker cp $(docker create --platform=${{ matrix.platforms }} corenel/yalk:${{ env.TAG }}-${{ env.PLATFORM }}-latest):/workspace/build/libyalk.so artifacts/libs
          docker cp $(docker create --platform=${{ matrix.platforms }} corenel/yalk:${{ env.TAG }}-${{ env.PLATFORM }}-latest):/workspace/include/yalk/interface/yalk.h artifacts/inlcude
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: yalk-${{ env.TAG }}-${{ env.PLATFORM }}
          path: artifacts
          retention-days: 7
